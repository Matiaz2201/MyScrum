package view;

//Generated by GuiGenie - Copyright (c) 2004 Mario Awad.
//Home Page http://guigenie.cjb.net - Check often for new versions!

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;

import javax.swing.*;

import com.myscrum.banco.BD;
import com.myscrum.model.Redimensionar;
import com.myscrum.model.CcCusto;
import com.myscrum.model.CcCustoDAO;
import com.myscrum.model.Etapa;
import com.myscrum.model.EtapaDAO;

public class EtapaTela extends JPanel {

	/**
	 * Desenvolvido por Abner Matias e Pedro Henrique
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private JComboBox<String> etapaCombo;
	private JTextField etapaText;
	private JButton salvarButton;
	private JButton atualizarButton;
	private JLabel ccCustoLabel;
	private JLabel cadastradoLabel;
	Redimensionar rsize = new Redimensionar();
	JPanel panel = new JPanel();

	EtapaDAO metodos = new EtapaDAO();
	BD bd = new BD();
	String sql;

	public EtapaTela() {
		// construct preComponents
		String[] Items = { "Selecione" };

		// construct components
		etapaCombo = new JComboBox(Items);
		etapaText = new JTextField(5);
		salvarButton = new JButton("Salvar");
		atualizarButton = new JButton("Atualizar");
		atualizarButton.setEnabled(false);
		ccCustoLabel = new JLabel("Etapa:");
		cadastradoLabel = new JLabel("Já cadastrado:");

		setBackground(Color.WHITE);

		// adjust size and set layout
		setPreferredSize(new Dimension(400, 400));

		// add components
		add(etapaCombo);
		add(etapaText);
		add(salvarButton);
		add(atualizarButton);
		add(ccCustoLabel);
		add(cadastradoLabel);

		// set component bounds (only needed by Absolute Positioning)
		etapaCombo.setBounds(110, 140, 210, 25);
		etapaCombo.setBackground(new Color(41, 106, 158));
		etapaCombo.setForeground(Color.WHITE);
		etapaText.setBounds(110, 75, 210, 30);
		etapaText.setBackground(new Color(41, 106, 158));
		etapaText.setForeground(Color.WHITE);
		salvarButton.setBounds(250, 265, 120, 35);
		salvarButton.setBackground(new Color(163, 184, 204));
		atualizarButton.setBounds(50, 265, 120, 35);
		atualizarButton.setBackground(new Color(163, 184, 204));
		ccCustoLabel.setBounds(110, 50, 95, 25);
		cadastradoLabel.setBounds(110, 115, 95, 25);

		carregarComboBox();
		
		etapaCombo.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (etapaCombo.getSelectedIndex() == 0) {
					salvarButton();
					etapaText.setText("");
				} else {
					atualizarButton();
					etapaText.setText(etapaCombo.getSelectedItem().toString());
				}
			}
		});

		salvarButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int escolha;
				if (etapaText.getText().equals("")) {
					JOptionPane.showMessageDialog(null, "Preencha o campos corretamente", "Campo Vazio", 0);
				} else if (etapaText.getText().equals(etapaCombo.getSelectedItem().toString())) {
					JOptionPane.showMessageDialog(null, "Altere o nome da etapa para atualizar", "Mensagem", 0);
				} else {
					escolha = JOptionPane.showConfirmDialog(null,
							"Deseja realmente cadastrar " + etapaText.getText() + " como etapa ?",
							"Selecione uma opção", JOptionPane.YES_NO_OPTION);
					if (escolha == JOptionPane.YES_OPTION) {

						Etapa etapa = new Etapa(etapaText.getText());
						metodos.cadastar(etapa);
						carregarComboBox();
						etapaText.setText("");
					}
				}
			}
		});

		atualizarButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int escolha;
				if (etapaText.getText().equals("")) {
					JOptionPane.showMessageDialog(null, "Preencha o campos corretamente", "Campo Vazio", 0);
				} else if (etapaText.getText().equals(etapaCombo.getSelectedItem().toString())) {
					JOptionPane.showMessageDialog(null, "Altera o nome do etapa para atualizar", "Mensagem", 0);
				} else {
					escolha = JOptionPane
							.showConfirmDialog(null,
									"Deseja realmente alterar " + etapaCombo.getSelectedItem().toString() + " para "
											+ etapaText.getText() + " ?",
									"Selecione uma opção", JOptionPane.YES_NO_OPTION);
					if (escolha == JOptionPane.YES_OPTION) {
						
						Etapa etapa = new Etapa(etapaCombo.getSelectedItem().toString(), etapaText.getText());
						metodos.atualizar(etapa);
						carregarComboBox();
						etapaText.setText("");
					}
				}
			}
		});

	}

	public void atualizarButton() {
		atualizarButton.setEnabled(true);
		salvarButton.setEnabled(false);
	}

	public void salvarButton() {
		salvarButton.setEnabled(true);
		atualizarButton.setEnabled(false);
	}

	public void carregarComboBox() {
		String etapa = null;
		String a;
		int b = 1;
		// Esvaziando a combobox
		while (b < etapaCombo.getItemCount()) {
			a = etapaCombo.getItemAt(b).toString();
			etapaCombo.removeItem(a);
		}

		// Preenchendo a combo box
		try {
			sql = "SELECT * FROM etapas";
			bd.getConnection();
			bd.st = bd.con.prepareStatement(sql);
			bd.rs = bd.st.executeQuery();
			while (bd.rs.next()) {
				etapa = bd.rs.getString("etapa");
				etapaCombo.addItem(etapa);
			}
			bd.close();
		} catch (SQLException erro) {
			JOptionPane.showMessageDialog(null, erro.toString());
		}
	}
	
}
