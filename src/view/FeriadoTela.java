package view;

//Generated by GuiGenie - Copyright (c) 2004 Mario Awad.
//Home Page http://guigenie.cjb.net - Check often for new versions!
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;

import com.myscrum.banco.Banco;
import com.myscrum.model.TableGrade;
import com.myscrum.model.Feriado;
import com.myscrum.model.FeriadoDAO;
import com.towel.swing.calendar.CalendarView;

public class FeriadoTela extends JPanel {
	/**
	 * Desenvolvido por Abner Matias e Pedro Henrique
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private CalendarView feriadoText;
	private JButton salvarButton;
	private JButton limparButton;
	private JButton atualizarButton;
	private JLabel feriadoLabel;
	private JLabel descLabel;
	private JTextArea descText;
	private JLabel id_feriado;
	private JLabel id;
	private JTable tabela;
	private JScrollPane sp;
	String sql;

	Feriado variavel = new Feriado();
	FeriadoDAO metodos = new FeriadoDAO();

	public FeriadoTela() {
		// construct components
		feriadoText = new CalendarView();
		salvarButton = new JButton("Salvar");
		limparButton = new JButton("Limpar");
		limparButton.setEnabled(false);
		atualizarButton = new JButton("Atualizar");
		atualizarButton.setEnabled(false);
		feriadoLabel = new JLabel("Data do feriado:");
		descLabel = new JLabel("Descrição:");
		descText = new JTextArea();
		id_feriado = new JLabel("ID: ");
		id = new JLabel("");

		setBackground(Color.WHITE);

		// adjust size and set layout
		setPreferredSize(new Dimension(422, 348));
		setLayout(null);

		// add components
		add(feriadoText);
		add(salvarButton);
		add(limparButton);
		add(atualizarButton);
		add(feriadoLabel);
		add(descLabel);
		add(descText);
		add(id_feriado);
		add(id);

		// set component bounds (only needed by Absolute Positioning)
		Icon icon = new ImageIcon(getClass().getResource("/com/myscrum/assets/calendar.png"));// Criando icone para os
																								// botões do calendar
																								// view

		feriadoText.setBounds(110, 25, 209, 30);
		feriadoText.setIcon(icon);
		feriadoText.getEditor().setBackground(new Color(41, 106, 158));
		feriadoText.getEditor().setForeground(new Color(255, 255, 255));
		feriadoText.setWeekDaysBackground(new Color(41, 106, 158));

		salvarButton.setBounds(296, 265, 120, 35);
		salvarButton.setBackground(new Color(163, 184, 204));
		limparButton.setBounds(150, 265, 120, 35);
		limparButton.setBackground(new Color(163, 184, 204));
		atualizarButton.setBounds(5, 265, 120, 35);
		atualizarButton.setBackground(new Color(163, 184, 204));
		feriadoLabel.setBounds(110, 5, 100, 25);
		descLabel.setBounds(110, 52, 95, 25);
		descText.setBounds(110, 75, 210, 55);
		descText.setBackground(new Color(41, 106, 158));
		descText.setForeground(Color.WHITE);
		descText.setLineWrap(true);// quebra de linha
		id_feriado.setBounds(5, 5, 50, 20);
		id.setBounds(20, 5, 25, 20);

		sql = "SELECT * FROM feriados";

		listar(sql);

		salvarButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int escolha;
				if (feriadoText.getText().equals("") || descText.getText().equals("")) {
					JOptionPane.showMessageDialog(null, "Preencha o campos corretamente", "Campo Vazio", 0);
				} else {
					escolha = JOptionPane.showConfirmDialog(null, "Deseja realmente cadastrar este feriado?",
							"Selecione uma opção", JOptionPane.YES_NO_OPTION);
					if (escolha == JOptionPane.YES_OPTION) {
						SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
						Date data_desejada = null;
						try {
							data_desejada = new SimpleDateFormat("dd/MM/yyyy").parse(feriadoText.getText());
						} catch (ParseException e1) {
							e1.printStackTrace();
						}
						String data = formato.format(data_desejada);

						variavel.setData(data);
						variavel.setDesc(descText.getText());
						metodos.cadastrar();
						feriadoText.setText("");
						descText.setText("");
						id.setText("");
						listar(sql);
					}
				}
			}
		});

		limparButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				salvarButton();
				feriadoText.setText("");
				descText.setText("");
				id.setText("");
				tabela.setCellSelectionEnabled(false);// limpa toda seleção da tabela

			}
		});

		atualizarButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int escolha;
				if (feriadoText.getText().equals("") || descText.getText().equals("")) {
					JOptionPane.showMessageDialog(null, "Preencha o campos corretamente", "Campo Vazio", 0);
				} else {
					escolha = JOptionPane.showConfirmDialog(null, "Deseja realmente atualizar este feriado?",
							"Selecione uma opção", JOptionPane.YES_NO_OPTION);
					if (escolha == JOptionPane.YES_OPTION) {
						SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
						Date data_desejada = null;
						try {
							data_desejada = new SimpleDateFormat("dd/MM/yyyy").parse(feriadoText.getText());
						} catch (ParseException e1) {
							e1.printStackTrace();
						}
						String data = formato.format(data_desejada);

						variavel.setData(data);
						variavel.setDesc(descText.getText());
						variavel.setId_feriado(Integer.parseInt(id.getText()));
						metodos.atualizar();
						feriadoText.setText("");
						descText.setText("");
						id.setText("");
						salvarButton();
						listar(sql);
					}
				}
			}
		});
	}

	// Metodos
	public void atualizarButton() {
		atualizarButton.setEnabled(true);
		limparButton.setEnabled(true);
		salvarButton.setEnabled(false);
	}

	public void salvarButton() {
		salvarButton.setEnabled(true);
		atualizarButton.setEnabled(false);
		limparButton.setEnabled(false);
	}

	public void listar(String sql) {
		
		try {
			if (Banco.conexao()) {
				Banco.st = Banco.con.prepareStatement(sql);
				Banco.rs = Banco.st.executeQuery();
				if (Banco.rs.next()) {// se haver tarefas continue

					if (tabela != null) {// se existir outra tabela montada apaga
						tabela.setVisible(false);
						tabela = null;
						sp.setVisible(false);
						sp = null;
					}

					Vector<String> cabecalhoPersonalizado = new Vector<>();

					cabecalhoPersonalizado.addElement("ID");
					cabecalhoPersonalizado.addElement("Data");
					cabecalhoPersonalizado.addElement("Descrição");

					tabela = TableGrade.getTable(sql, cabecalhoPersonalizado);

					sp = new JScrollPane(tabela);
					// adiciona Scroll ao frame

					sp.setBounds(50, 135, 321, 100);
					add(sp);
					updateUI(); // atualiza tela

					tabela.setEditingRow(1);
					tabela.setEditingColumn(1);
					tabela.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

					tabela.addMouseListener(new MouseAdapter() {
						public void mouseReleased(java.awt.event.MouseEvent a) {
							if (a.getClickCount() == 2) {
								id.setText(tabela.getValueAt(tabela.getSelectedRow(), 0).toString());
								feriadoText.setText(tabela.getValueAt(tabela.getSelectedRow(), 1).toString());
								descText.setText(tabela.getValueAt(tabela.getSelectedRow(), 2).toString());
								atualizarButton();

							}
						}
					});

				} else {
					if (tabela != null) {
						tabela.setVisible(false);
						sp.setVisible(false);
					}
					JOptionPane.showMessageDialog(null, "Sem registro de feriados");
				}
			}
		} catch (SQLException erro) {
			JOptionPane.showMessageDialog(null, "Falha na conexão ao banco");
			JOptionPane.showMessageDialog(null, erro.toString());
		} finally {
		}
	}
}
