package view;

//Generated by GuiGenie - Copyright (c) 2004 Mario Awad.
//Home Page http://guigenie.cjb.net - Check often for new versions!

import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import com.inet.jortho.FileUserDictionary;
import com.inet.jortho.SpellChecker;
import com.myscrum.banco.BD;
import com.myscrum.banco.Banco;
import com.myscrum.controller.Controle;

import com.myscrum.model.Redimensionar;
import com.myscrum.model.TratamentoDeAnexo;
import com.myscrum.model.Tarefa;
import com.myscrum.model.TarefaDAO;
import com.towel.swing.calendar.CalendarView;

import javax.swing.border.LineBorder;
import javax.swing.SwingConstants;
import diu.swe.habib.JPanelSlider.JPanelSlider;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.swing.JInternalFrame;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.border.MatteBorder;
import java.awt.BorderLayout;
import javax.swing.JTable;
import javax.swing.LayoutStyle.ComponentPlacement;

public class TarefaEditTela extends JFrame {
	/**
	 * Desenvolvido por Abner Matias e Pedro Henrique
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private TarefaTela formularioPai;
	private JLabel descLabel;
	private JScrollPane scrollPaneDesc;
	private JLabel centroCLabel;
	private JComboBox centroCComboBox;
	private JComboBox prioridadeComboBox;
	private JLabel prioridadeLabel;
	private JLabel statusLabel;
	private JComboBox statusComboBox;
	private JComboBox tamanhoComboBox;
	private JButton tamanhoLabel;
	private JTextField pecentText;
	private JLabel percentLabel;
	private JLabel prazoLabel;
	public CalendarView dataIniText;
	private JLabel dataIniLabel;
	public CalendarView dataRealText;
	private JLabel dataRealLabel;
	public JTextField pred1Text;
	private JLabel pred1Label;
	public JTextField pred2Text;
	public JTextField pred3Text;
	private JLabel pendlabel;
	private JLabel statPendLabel;
	private JTextArea historicoText;
	private JLabel histLabel;
	private JComboBox prazDiaComboBox;
	private CalendarView datafimText;
	private JLabel datafimLabel;
	private JButton salvarButton;
	private JButton atualizarButton;
	private JTextArea statPendText;
	private JComboBox pendComboBox;
	private JComboBox respComboBox;
	private JComboBox autoridadeComboBox;
	private JComboBox dptoCombobox;
	private JLabel autoridadeLabel;
	private JLabel dptoLabel;
	private JLabel respLabel;
	private JButton duplicarButton;
	private JComboBox exec10ComboBox;
	private JComboBox exec9ComboBox;
	private JComboBox exec8ComboBox;
	private JComboBox exec7ComboBox;
	private JComboBox exec6ComboBox;
	private JComboBox exec5ComboBox;
	private JComboBox exec4ComboBox;
	private JComboBox exec3ComboBox;
	private JComboBox exec2ComboBox;
	private JComboBox exec1ComboBox;
	private JComboBox porcento10ComboBox;
	private JComboBox porcento9ComboBox;
	private JComboBox porcento8ComboBox;
	private JComboBox porcento7ComboBox;
	private JComboBox porcento6ComboBox;
	private JComboBox porcento5ComboBox;
	private JComboBox porcento4ComboBox;
	private JComboBox porcento3ComboBox;
	private JComboBox porcento2ComboBox;
	private JComboBox porcento1ComboBox;
	private JTextArea descText;
	private JButton Acrescentar;
	private JButton Remover;
	private JLabel Executores;
	private JLabel ID;
	private JLabel ID_tarefa;
	public boolean kamban;
	Controle control = new Controle();
	Tarefa variavel = new Tarefa();
	TarefaDAO metodos = new TarefaDAO();
	TratamentoDeAnexo tratamento = new TratamentoDeAnexo();
	JPanel leftPanel = new JPanel();
	JPanelSlider contentePanel = new JPanelSlider();
	BD bd = new BD();
	Redimensionar rsize = new Redimensionar();
	String sql;
	JLabel fundo;
	JPanel executores = new JPanel();
	JScrollPane sp = new JScrollPane(executores, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
			JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
	int cont = 1;
	ArrayList<Date> feriados = new ArrayList<>();
	ArrayList<String> feriadosString = new ArrayList<>();
	private JLabel atualiazacaoLabel;
	private JButton copiarStatusButton;
	private JButton anexoButton;
	private JPanel rightPanel;
	private JButton tarefaButton;
	private JLabel anexo1Label;
	private JLabel anexo2Label;
	private JLabel anexo3Label;
	private JLabel anexo4Label;
	private JButton anexoButton1;
	private JButton anexoButton2;
	private JButton anexoButton3;
	private JButton anexoButton4;
	private JButton deletarButton1;
	private JButton deletarButton2;
	private JButton deletarButton3;
	private JButton deletarButton4;
	private JFileChooser anexo = new JFileChooser();
	private JInternalFrame internalFrame;

	private JLabel label;
	private JLabel checadoLabel;
	private JComboBox checadoComboBox;
	private JComboBox processoComboBox;
	private JLabel subetapaLabel;
	private JLabel estapaLabel;
	private JLabel labelProcesso;
	private JComboBox etapaCombo;
	private JComboBox subEtapaCombo;

	private ResultSet etapas;
	private ResultSet subEtapas;

//metodo de referencia a classe pai, para poder usar os metodos da clalsse usuarioTela
	public TarefaEditTela(JFrame formularioPai) {
		addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				bd.close();
				dispose();
			}
		});
		if (formularioPai instanceof TarefaTela)
			this.formularioPai = (TarefaTela) formularioPai;

		// Criando classe e metodo listener para implementar na classe listusuarioTela
		class AdicionarTarefaListener implements ActionListener {
			public TarefaTela formularioPrincipal;// criando objeto para o formulario pai

			public AdicionarTarefaListener(JFrame formularioPrincipal) {
				this.formularioPrincipal = (TarefaTela) formularioPrincipal;

			}

			public void actionPerformed(ActionEvent event) {
				if (verificar() == true) {
					TarefaEditTela tela = new TarefaEditTela(formularioPrincipal); // colocando a tela dentro do objeto
					tela.setVisible(true);// mostrando a tela
					tela.salvarButton();// ativa botaão salvar e desativa botão atualizar
					tela.carregarDados();// carrega os dados
					tela.ID_tarefa.setText("");
					if (kamban == true) {// Informa a tela que foi duplicada pelo kamban
						tela.kamban = true;
					}
				}
			}
		}

		criarListEtapa();
		criarListSubEtapa();

		// sets iniciais
		setTitle("Nova tarefa");// titulo do frame
		setResizable(false);
		contentePanel.setBackground(Color.WHITE);
		setContentPane(contentePanel);

		// Mandando o JFrame utilizar suas dimensões
		setSize(613, 710);
		leftPanel.setBounds(0, 0, 613, 683);
		leftPanel.setLayout(null);// organiza os botões conforme setado no panel
		executores.setLayout(new FlowLayout());
		executores.setBackground(new Color(41, 106, 158));

		// construct preComponents
		String[] prioridadeComboBoxItems = { "Selecione", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" };
		String[] statusComboBoxItems = { "Selecione", "A fazer", "Fazendo", "Feito", "Cancelado" };
		String[] prazDiaComboBoxItems = { "Selecione", "0", "1", "2", "3", "5", "8", "13", "21", "34", "55", "89",
				"144", "233", "377", "610" };
		String[] porcento = { "%", "100%", "95%", "90%", "85%", "80%", "75%", "70%", "65%", "60%", "55%", "50%", "45%", "40%", "35%", "30%", "25%","20%","15%","10%","5%" };
		String[] Selecione = { "Selecione" };
		getContentPane().setLayout(null);

		// construct components
		descLabel = new JLabel("* Descrição da tarefa:");
		centroCLabel = new JLabel("* Centro de custo:");
		centroCComboBox = new JComboBox(Selecione);
		centroCComboBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				carregarComboBoxEtapa(centroCComboBox.getSelectedItem().toString());
			}
		});
		prioridadeComboBox = new JComboBox(prioridadeComboBoxItems);
		prioridadeLabel = new JLabel("* Prioridade:");
		statusLabel = new JLabel("* Status:");
		statusComboBox = new JComboBox(statusComboBoxItems);
		tamanhoComboBox = new JComboBox(Selecione);
		pecentText = new JTextField("0");
		percentLabel = new JLabel("* Porcentagem:");
		prazoLabel = new JLabel("* Prazo de dias:");
		dataIniText = new CalendarView();
		dataIniLabel = new JLabel("* Data de inicio:");
		dataRealText = new CalendarView();
		dataRealLabel = new JLabel("* Data real:");
		pred1Text = new JTextField(5);
		pred1Text.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				if (e.getClickCount() == 2) {
					if (kamban) {
						Controle.telaKamban.predecessora = pred1Text;
						Controle.telaKamban.toFront();

					} else {
						TarefaEditTela.this.formularioPai.toFront();
						TarefaEditTela.this.formularioPai.predecessora = pred1Text;
					}
				}
			}
		});
		pred1Label = new JLabel("Predecessores");
		pred1Label.setHorizontalAlignment(SwingConstants.CENTER);
		pred2Text = new JTextField(5);
		pred2Text.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				if (e.getClickCount() == 2) {
					if (kamban) {
						Controle.telaKamban.predecessora = pred2Text;
						Controle.telaKamban.toFront();

					} else {
						TarefaEditTela.this.formularioPai.toFront();
						TarefaEditTela.this.formularioPai.predecessora = pred2Text;
					}
				}
			}
		});
		pred3Text = new JTextField(5);
		pred3Text.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				if (e.getClickCount() == 2) {
					if (kamban) {
						Controle.telaKamban.predecessora = pred3Text;
						Controle.telaKamban.toFront();

					} else {
						TarefaEditTela.this.formularioPai.toFront();
						TarefaEditTela.this.formularioPai.predecessora = pred3Text;
					}
				}
			}
		});
		pendlabel = new JLabel("Pendência:");
		statPendLabel = new JLabel("Status Pendencia:");
		internalFrame = new JInternalFrame("Tamanho");
		internalFrame.setFrameIcon(new ImageIcon(TarefaEditTela.class.getResource("/com/myscrum/assets/setIcon1.png")));
		internalFrame.setBackground(Color.WHITE);
		internalFrame.setBounds(100, 125, 380, 298);
		leftPanel.add(internalFrame);

		anexoButton = new JButton("Anexo");
		anexoButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				tratamento.carregarAnexo(bd, anexo1Label, "anexo1", ID_tarefa.getText());
				tratamento.carregarAnexo(bd, anexo2Label, "anexo2", ID_tarefa.getText());
				tratamento.carregarAnexo(bd, anexo3Label, "anexo3", ID_tarefa.getText());
				tratamento.carregarAnexo(bd, anexo4Label, "anexo4", ID_tarefa.getText());
				contentePanel.nextPanel(15, rightPanel, contentePanel.left);

			}
		});

		tamanhoLabel = new JButton("* Tamanho:");
		tamanhoLabel.setHorizontalAlignment(SwingConstants.LEFT);
		tamanhoLabel.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				if (internalFrame.isVisible()) {
					internalFrame.setVisible(false);

				} else {
					internalFrame.setVisible(true);

				}

			}
		});
		tamanhoLabel.setContentAreaFilled(false);
		tamanhoLabel.setBorder(null);
		tamanhoLabel.setBackground(Color.WHITE);

		label = new JLabel("");
		label.setHorizontalAlignment(SwingConstants.CENTER);
		label.setIcon(new ImageIcon(TarefaEditTela.class.getResource("/com/myscrum/assets/tabelaPontos.jpeg")));
		internalFrame.getContentPane().add(label, BorderLayout.CENTER);
		leftPanel.add(tamanhoLabel);
		tamanhoLabel.setBounds(100, 110, 70, 14);
		anexoButton.setBounds(515, 10, 90, 28);
		anexoButton.setEnabled(false);
		leftPanel.add(anexoButton);

		historicoText = new JTextArea();
		historicoText.setFont(new Font("Dialog", Font.PLAIN, 15));
		JScrollPane scrollPaneHisto = new JScrollPane(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
				JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		scrollPaneHisto.setBorder(new LineBorder(Color.BLACK, 1, true));
		scrollPaneHisto.setBounds(5, 565, 598, 55);
		leftPanel.add(scrollPaneHisto);

		scrollPaneHisto.setViewportView(historicoText);
		historicoText.setLineWrap(true);
		historicoText.setTabSize(0);

		histLabel = new JLabel("Histórico:");
		prazDiaComboBox = new JComboBox(prazDiaComboBoxItems);
		datafimText = new CalendarView();
		datafimLabel = new JLabel("* Data final:");
		salvarButton = new JButton("Salvar");
		atualizarButton = new JButton("Atualizar");

		statPendText = new JTextArea();
		statPendText.setFont(new Font("Dialog", Font.PLAIN, 15));
		JScrollPane scrollPanePend = new JScrollPane(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
				JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		scrollPanePend.setBorder(new LineBorder(Color.BLACK, 1, true));
		scrollPanePend.setBounds(5, 485, 598, 55);
		leftPanel.add(scrollPanePend);

		scrollPanePend.setViewportView(statPendText);
		statPendText.setLineWrap(true);
		statPendText.setTabSize(0);

		pendComboBox = new JComboBox(Selecione);
		respComboBox = new JComboBox(Selecione);
		respLabel = new JLabel("* Responsável:");
		autoridadeLabel = new JLabel("* Autoridade:");
		autoridadeComboBox = new JComboBox(Selecione);
		dptoLabel = new JLabel("* Departamento");
		dptoCombobox = new JComboBox(Selecione);
		duplicarButton = new JButton("Duplicar");
		exec10ComboBox = new JComboBox(Selecione);
		exec9ComboBox = new JComboBox(Selecione);
		exec8ComboBox = new JComboBox(Selecione);
		exec7ComboBox = new JComboBox(Selecione);
		exec6ComboBox = new JComboBox(Selecione);
		exec5ComboBox = new JComboBox(Selecione);
		exec4ComboBox = new JComboBox(Selecione);
		exec3ComboBox = new JComboBox(Selecione);
		exec2ComboBox = new JComboBox(Selecione);
		exec1ComboBox = new JComboBox(Selecione);
		porcento10ComboBox = new JComboBox(porcento);
		porcento9ComboBox = new JComboBox(porcento);
		porcento8ComboBox = new JComboBox(porcento);
		porcento7ComboBox = new JComboBox(porcento);
		porcento6ComboBox = new JComboBox(porcento);
		porcento5ComboBox = new JComboBox(porcento);
		porcento4ComboBox = new JComboBox(porcento);
		porcento3ComboBox = new JComboBox(porcento);
		porcento2ComboBox = new JComboBox(porcento);
		porcento1ComboBox = new JComboBox(porcento);
		Acrescentar = new JButton("");
		Remover = new JButton("");
		Executores = new JLabel("Executores");

		// scroll panel na descrição
		descText = new JTextArea();
		descText.setFont(new Font("Dialog", Font.PLAIN, 15));
		descText.setLineWrap(true);
		descText.setTabSize(0);
		scrollPaneDesc = new JScrollPane(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
				JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		scrollPaneDesc.setBorder(new LineBorder(Color.BLACK, 1, true));
		scrollPaneDesc.setBounds(5, 50, 600, 55);
		scrollPaneDesc.setViewportView(descText);
		leftPanel.add(scrollPaneDesc);

		ID = new JLabel("ID:");
		ID_tarefa = new JLabel("");

		// add components
		leftPanel.add(descLabel);
		leftPanel.add(centroCLabel);
		leftPanel.add(centroCComboBox);
		leftPanel.add(prioridadeComboBox);
		leftPanel.add(prioridadeLabel);
		leftPanel.add(statusLabel);
		leftPanel.add(statusComboBox);
		leftPanel.add(tamanhoComboBox);
		leftPanel.add(pecentText);
		leftPanel.add(percentLabel);
		leftPanel.add(prazoLabel);
		leftPanel.add(dataIniText);
		leftPanel.add(dataIniLabel);
		leftPanel.add(dataRealText);
		leftPanel.add(dataRealLabel);
		leftPanel.add(pred1Text);
		leftPanel.add(pred1Label);
		leftPanel.add(pred2Text);
		leftPanel.add(pred3Text);
		leftPanel.add(pendlabel);
		leftPanel.add(statPendLabel);
		leftPanel.add(histLabel);
		leftPanel.add(prazDiaComboBox);
		leftPanel.add(datafimText);
		leftPanel.add(datafimLabel);
		leftPanel.add(salvarButton);
		leftPanel.add(atualizarButton);
		leftPanel.add(pendComboBox);
		leftPanel.add(respComboBox);
		leftPanel.add(respLabel);
		leftPanel.add(autoridadeComboBox);
		leftPanel.add(autoridadeLabel);
		leftPanel.add(dptoCombobox);
		leftPanel.add(dptoLabel);
		leftPanel.add(duplicarButton);
		leftPanel.add(Acrescentar);
		leftPanel.add(Remover);
		leftPanel.add(Executores);
		leftPanel.add(ID);
		leftPanel.add(ID_tarefa);

		// Add componentes Executores
		executores.add(exec1ComboBox);
		executores.add(porcento1ComboBox);
		executores.add(exec2ComboBox);
		executores.add(porcento2ComboBox);
		executores.add(exec3ComboBox);
		executores.add(porcento3ComboBox);
		executores.add(exec4ComboBox);
		executores.add(porcento4ComboBox);
		executores.add(exec5ComboBox);
		executores.add(porcento5ComboBox);
		executores.add(exec6ComboBox);
		executores.add(porcento6ComboBox);
		executores.add(exec7ComboBox);
		executores.add(porcento7ComboBox);
		executores.add(exec8ComboBox);
		executores.add(porcento8ComboBox);
		executores.add(exec9ComboBox);
		executores.add(porcento9ComboBox);
		executores.add(exec9ComboBox);
		executores.add(porcento9ComboBox);
		executores.add(exec10ComboBox);
		executores.add(porcento10ComboBox);

		leftPanel.add(sp);
		getContentPane().add(leftPanel);

		// Set componentes do Panel
		descLabel.setBounds(5, 30, 125, 25);
		centroCLabel.setBounds(300, 105, 120, 25);
		centroCComboBox.setBounds(300, 125, 303, 25);
		centroCComboBox.setBackground(new Color(41, 106, 158));// cor do fundo
		centroCComboBox.setForeground(Color.WHITE);
		prioridadeLabel.setBounds(5, 105, 70, 25);
		prioridadeComboBox.setBounds(5, 125, 85, 25);
		prioridadeComboBox.setBackground(new Color(41, 106, 158));// cor do fundo
		prioridadeComboBox.setForeground(Color.WHITE);
		statusLabel.setBounds(195, 105, 55, 25);
		statusComboBox.setBounds(195, 125, 95, 25);
		statusComboBox.setBackground(new Color(41, 106, 158));// cor do fundo
		statusComboBox.setForeground(Color.WHITE);
		tamanhoComboBox.setBounds(100, 125, 85, 25);
		tamanhoComboBox.setBackground(new Color(41, 106, 158));// cor do fundo
		tamanhoComboBox.setForeground(Color.WHITE);
		pecentText.setBounds(516, 175, 55, 25);
		pecentText.setBackground(new Color(41, 106, 158));
		pecentText.setForeground(Color.WHITE);
		percentLabel.setBounds(516, 160, 89, 14);
		prazoLabel.setBounds(395, 160, 95, 14);
		prazDiaComboBox.setBounds(395, 175, 85, 25);// prazo combobox
		prazDiaComboBox.setBackground(new Color(41, 106, 158));// cor do fundo
		prazDiaComboBox.setForeground(Color.WHITE);

		Icon icon = new ImageIcon(getClass().getResource("/com/myscrum/assets/calendar.png"));// Criando icone para os
																								// botões do
		// calendar view

		dataIniText.setBounds(5, 175, 120, 25); // DATA INI
		dataIniText.getEditor().setBackground(new Color(41, 106, 158));
		dataIniText.getEditor().setForeground(new Color(255, 255, 255));
		dataIniText.setIcon(icon);
		dataIniText.setFeriados(feriadosString);
		dataIniText.setWeekDaysBackground(new Color(41, 106, 158));

		dataIniLabel.setBounds(5, 160, 120, 14);// LABEL DATA INI

		dataRealText.setBounds(135, 175, 120, 25); // DATA REAL
		dataRealText.getEditor().setBackground(new Color(41, 106, 158));
		dataRealText.getEditor().setForeground(new Color(255, 255, 255));
		dataRealText.setIcon(icon);
		dataRealText.setFeriados(feriadosString);
		dataRealText.setWeekDaysBackground(new Color(41, 106, 158));

		dataRealLabel.setBounds(135, 161, 120, 14);// LABEL DATA REAL

		datafimText.setBounds(265, 175, 120, 25); // DATA FIM
		datafimText.getEditor().setBackground(new Color(41, 106, 158)); // AQUI
																		// <------------------------------------------
																		// AQUI
		datafimText.getEditor().setForeground(new Color(255, 255, 255));
		datafimText.setIcon(icon);
		datafimText.setFeriados(feriadosString);
		datafimText.setWeekDaysBackground(new Color(41, 106, 158));

		datafimLabel.setBounds(265, 161, 120, 14); // LABEL DATA FIM

		pred1Text.setBounds(5, 221, 100, 25);
		pred1Text.setBackground(new Color(41, 106, 158));
		pred1Text.setForeground(Color.WHITE);
		pred1Label.setBounds(5, 205, 100, 14);
		pred2Text.setBounds(5, 247, 100, 25);
		pred2Text.setBackground(new Color(41, 106, 158));
		pred2Text.setForeground(Color.WHITE);
		pred3Text.setBounds(5, 273, 100, 25);
		pred3Text.setBackground(new Color(41, 106, 158));
		pred3Text.setForeground(Color.WHITE);
		pendlabel.setBounds(401, 258, 75, 14);
		pendComboBox.setBounds(401, 273, 200, 25);
		pendComboBox.setBackground(new Color(41, 106, 158));// cor do fundo
		pendComboBox.setForeground(Color.WHITE);
		statPendLabel.setBounds(5, 462, 115, 25);
		historicoText.setBounds(5, 455, 600, 55);
		salvarButton.setBounds(60, 640, 120, 35); // button
		salvarButton.setBackground(new Color(163, 184, 204));// cor do botão
		atualizarButton.setBounds(246, 640, 120, 35); // button
		atualizarButton.setBackground(new Color(163, 184, 204));// cor do botão
		duplicarButton.setBounds(434, 640, 120, 35); // button
		duplicarButton.setBackground(new Color(163, 184, 204));// cor do botão
		histLabel.setBounds(5, 540, 65, 25);
		statPendText.setBounds(5, 535, 600, 55);
		respLabel.setBounds(5, 304, 120, 25);
		respComboBox.setBounds(5, 328, 185, 25);
		respComboBox.setBackground(new Color(41, 106, 158));// cor do fundo
		respComboBox.setForeground(Color.WHITE);
		autoridadeLabel.setBounds(210, 304, 120, 25);
		autoridadeComboBox.setBounds(210, 328, 185, 25);
		autoridadeComboBox.setBackground(new Color(41, 106, 158));// cor do fundo
		autoridadeComboBox.setForeground(Color.WHITE);
		dptoLabel.setBounds(416, 304, 120, 25);
		dptoCombobox.setBounds(416, 328, 185, 25);
		dptoCombobox.setBackground(new Color(41, 106, 158));// cor do fundo
		dptoCombobox.setForeground(Color.WHITE);
		ID.setBounds(5, 5, 30, 30);
		ID_tarefa.setBounds(35, 5, 70, 30);

		// set componentes executores
		exec10ComboBox.setBackground(new Color(255, 255, 255));// cor do fundo
		exec10ComboBox.setVisible(false);
		exec9ComboBox.setBackground(new Color(255, 255, 255));// cor do fundo
		exec9ComboBox.setVisible(false);
		exec8ComboBox.setBackground(new Color(255, 255, 255));// cor do fundo
		exec8ComboBox.setVisible(false);
		exec7ComboBox.setBackground(new Color(255, 255, 255));// cor do fundo
		exec7ComboBox.setVisible(false);
		exec6ComboBox.setBackground(new Color(255, 255, 255));// cor do fundo
		exec6ComboBox.setVisible(false);
		exec5ComboBox.setBackground(new Color(255, 255, 255));// cor do fundo
		exec5ComboBox.setVisible(false);
		exec4ComboBox.setBackground(new Color(255, 255, 255));// cor do fundo
		exec4ComboBox.setVisible(false);
		exec3ComboBox.setBackground(new Color(255, 255, 255));// cor do fundo
		exec3ComboBox.setVisible(false);
		exec2ComboBox.setBackground(new Color(255, 255, 255));// cor do fundo
		exec2ComboBox.setVisible(false);
		exec1ComboBox.setBackground(new Color(255, 255, 255));// cor do fundo
		porcento1ComboBox.setBackground(new Color(255, 255, 255));// cor do fundo
		porcento2ComboBox.setBackground(new Color(255, 255, 255));// cor do fundo
		porcento2ComboBox.setVisible(false);
		porcento3ComboBox.setBackground(new Color(255, 255, 255));// cor do fundo
		porcento3ComboBox.setVisible(false);
		porcento4ComboBox.setBackground(new Color(255, 255, 255));// cor do fundo
		porcento4ComboBox.setVisible(false);
		porcento5ComboBox.setBackground(new Color(255, 255, 255));// cor do fundo
		porcento5ComboBox.setVisible(false);
		porcento6ComboBox.setBackground(new Color(255, 255, 255));// cor do fundo
		porcento6ComboBox.setVisible(false);
		porcento7ComboBox.setBackground(new Color(255, 255, 255));// cor do fundo
		porcento7ComboBox.setVisible(false);
		porcento8ComboBox.setBackground(new Color(255, 255, 255));// cor do fundo
		porcento8ComboBox.setVisible(false);
		porcento9ComboBox.setBackground(new Color(255, 255, 255));// cor do fundo
		porcento9ComboBox.setVisible(false);
		porcento10ComboBox.setBackground(new Color(255, 255, 255));// cor do fundo
		porcento10ComboBox.setVisible(false);

		// Deixando botão com forma no icone
		Acrescentar.setIcon(new ImageIcon(TarefaEditTela.class.getResource("/com/myscrum/assets/icone_mais.png")));
		Acrescentar.setContentAreaFilled(false);
		Acrescentar.setBorderPainted(false);
		Acrescentar.setFocusPainted(false);
		Acrescentar.setBounds(60, 356, 25, 25);

		// Deixando botão com forma no icone
		Remover.setIcon(new ImageIcon(TarefaEditTela.class.getResource("/com/myscrum/assets/icone_menos.png")));
		Remover.setContentAreaFilled(false);
		Remover.setBorderPainted(false);
		Remover.setFocusPainted(false);
		Remover.setBounds(5, 356, 25, 25);

		// Label de executores
		Executores.setBounds(246, 356, 150, 30);
		Executores.setFont(new Font("Segoe UI", Font.CENTER_BASELINE, 17));

		// mudando Icone do Frame
		java.net.URL url = this.getClass().getResource("/com/myscrum/assets/setIcon1.png");
		Image iconeTitulo = Toolkit.getDefaultToolkit().getImage(url);
		this.setIconImage(iconeTitulo);

		/// sets finais
		sp.setBounds(5, 383, 596, 70);
		leftPanel.setBackground(Color.WHITE);

		JLabel lblNewLabel = new JLabel("%");
		lblNewLabel.setFont(new Font("Dialog", Font.PLAIN, 16));
		lblNewLabel.setHorizontalAlignment(SwingConstants.CENTER);
		lblNewLabel.setBounds(566, 175, 30, 25);
		leftPanel.add(lblNewLabel);

		atualiazacaoLabel = new JLabel("");
		atualiazacaoLabel.setHorizontalAlignment(SwingConstants.CENTER);
		atualiazacaoLabel.setBounds(1, 624, 604, 16);
		leftPanel.add(atualiazacaoLabel);

		copiarStatusButton = new JButton("Copiar");
		copiarStatusButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (statPendText.getText().toString().equals("")) {
					JOptionPane.showMessageDialog(null, "Não existe informação no campo Status pendência");
				} else {
					historicoText.setText(statPendText.getText() + "\r\n" + historicoText.getText());
					statPendText.setText("");
				}
			}
		});
		copiarStatusButton.setBounds(512, 455, 90, 28);
		leftPanel.add(copiarStatusButton);

		checadoLabel = new JLabel("Checado");
		checadoLabel.setBounds(255, 258, 75, 14);
		leftPanel.add(checadoLabel);

		checadoComboBox = new JComboBox(Selecione);
		checadoComboBox.setForeground(Color.WHITE);
		checadoComboBox.setBackground(new Color(41, 106, 158));
		checadoComboBox.setBounds(255, 273, 140, 25);
		leftPanel.add(checadoComboBox);

		processoComboBox = new JComboBox(Selecione);
		processoComboBox.setForeground(Color.WHITE);
		processoComboBox.setBackground(new Color(41, 106, 158));
		processoComboBox.setBounds(255, 221, 346, 25);
		leftPanel.add(processoComboBox);

		labelProcesso = new JLabel("Processo relacionado:");
		labelProcesso.setHorizontalAlignment(SwingConstants.LEFT);
		labelProcesso.setBounds(255, 205, 135, 14);
		leftPanel.add(labelProcesso);

		subetapaLabel = new JLabel("Subetapa");
		subetapaLabel.setBounds(115, 253, 75, 25);
		leftPanel.add(subetapaLabel);

		estapaLabel = new JLabel("Etapa");
		estapaLabel.setHorizontalAlignment(SwingConstants.LEFT);
		estapaLabel.setBounds(115, 205, 135, 14);
		leftPanel.add(estapaLabel);

		etapaCombo = new JComboBox(Selecione);
		etapaCombo.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				carregarComboBoxSubEtapa(etapaCombo.getSelectedItem().toString());
			}
		});
		etapaCombo.setForeground(Color.WHITE);
		etapaCombo.setBackground(new Color(41, 106, 158));
		etapaCombo.setBounds(115, 221, 135, 25);
		leftPanel.add(etapaCombo);

		subEtapaCombo = new JComboBox(Selecione);
		subEtapaCombo.setForeground(Color.WHITE);
		subEtapaCombo.setBackground(new Color(41, 106, 158));
		subEtapaCombo.setBounds(115, 273, 135, 25);
		leftPanel.add(subEtapaCombo);

		rightPanel = new JPanel();
		rightPanel.setBackground(Color.WHITE);
		rightPanel.setBounds(613, 0, 613, 683);
		contentePanel.add(rightPanel);
		rightPanel.setLayout(null);

		anexo1Label = new JLabel("+");
		anexo1Label.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				if (e.getClickCount() == 2) {
					if (anexo1Label.getIcon() != null) {
						try {
							tratamento.abrirAnexo(bd, "anexo1", ID_tarefa.getText());
						} catch (Exception e1) {
							JOptionPane.showMessageDialog(null,
									"Por favor verique seu software padrão para a visualização do arquvio desejado");
						}
					} else {
						int option = anexo.showOpenDialog(null);

						if (option == JFileChooser.APPROVE_OPTION) {
							tratamento.salvarAnexo(anexo1Label, anexo.getSelectedFile(),
									"//server/REDE/10-TI/MYSCRUM-FTP", bd, "anexo1", ID_tarefa.getText());
						} else {
							JOptionPane.showMessageDialog(null, "Nenhum arquivo selecionado");
						}
					}
				}
			}
		});
		anexo1Label.setFont(new Font("Dialog", Font.PLAIN, 99));
		anexo1Label.setHorizontalAlignment(SwingConstants.CENTER);
		anexo1Label.setBorder(new LineBorder(new Color(0, 0, 0), 2, true));
		anexo1Label.setBounds(0, 12, 282, 276);
		rightPanel.add(anexo1Label);

		anexo2Label = new JLabel("+");
		anexo2Label.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				if (e.getClickCount() == 2) {
					if (anexo2Label.getIcon() != null) {
						try {
							tratamento.abrirAnexo(bd, "anexo2", ID_tarefa.getText());
						} catch (Exception e1) {
							JOptionPane.showMessageDialog(null,
									"Por favor verique seu software padrão para a visualização do arquvio desejado");
						}
					} else {
						int option = anexo.showOpenDialog(null);

						if (option == JFileChooser.APPROVE_OPTION) {
							tratamento.salvarAnexo(anexo2Label, anexo.getSelectedFile(),
									"//server/REDE/10-TI/MYSCRUM-FTP", bd, "anexo2", ID_tarefa.getText());
						} else {
							JOptionPane.showMessageDialog(null, "Nenhum arquivo selecionado");
						}
					}
				}
			}
		});
		anexo2Label.setFont(new Font("Dialog", Font.PLAIN, 99));
		anexo2Label.setHorizontalAlignment(SwingConstants.CENTER);
		anexo2Label.setBorder(new LineBorder(new Color(0, 0, 0), 2, true));
		anexo2Label.setBounds(294, 12, 282, 276);
		rightPanel.add(anexo2Label);

		anexo3Label = new JLabel("+");
		anexo3Label.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				if (e.getClickCount() == 2) {
					if (anexo3Label.getIcon() != null) {
						try {
							tratamento.abrirAnexo(bd, "anexo3", ID_tarefa.getText());
						} catch (Exception e1) {
							JOptionPane.showMessageDialog(null,
									"Por favor verique seu software padrão para a visualização do arquvio desejado");
						}
					} else {
						int option = anexo.showOpenDialog(null);

						if (option == JFileChooser.APPROVE_OPTION) {
							tratamento.salvarAnexo(anexo3Label, anexo.getSelectedFile(),
									"//server/REDE/10-TI/MYSCRUM-FTP", bd, "anexo3", ID_tarefa.getText());
						} else {
							JOptionPane.showMessageDialog(null, "Nenhum arquivo selecionado");
						}
					}
				}
			}
		});
		anexo3Label.setHorizontalAlignment(SwingConstants.CENTER);
		anexo3Label.setFont(new Font("Dialog", Font.PLAIN, 99));
		anexo3Label.setBorder(new LineBorder(new Color(0, 0, 0), 2, true));
		anexo3Label.setBounds(0, 331, 282, 276);
		rightPanel.add(anexo3Label);

		anexo4Label = new JLabel("+");
		anexo4Label.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				if (e.getClickCount() == 2) {
					if (anexo4Label.getIcon() != null) {
						try {
							tratamento.abrirAnexo(bd, "anexo4", ID_tarefa.getText());
						} catch (Exception e1) {
							JOptionPane.showMessageDialog(null,
									"Por favor verique seu software padrão para a visualização do arquvio desejado");
						}
					} else {
						int option = anexo.showOpenDialog(null);

						if (option == JFileChooser.APPROVE_OPTION) {
							tratamento.salvarAnexo(anexo4Label, anexo.getSelectedFile(),
									"//server/REDE/10-TI/MYSCRUM-FTP", bd, "anexo4", ID_tarefa.getText());
						} else {
							JOptionPane.showMessageDialog(null, "Nenhum arquivo selecionado");
						}
					}
				}
			}
		});
		anexo4Label.setHorizontalAlignment(SwingConstants.CENTER);
		anexo4Label.setFont(new Font("Dialog", Font.PLAIN, 99));
		anexo4Label.setBorder(new LineBorder(new Color(0, 0, 0), 2, true));
		anexo4Label.setBounds(294, 331, 282, 276);
		rightPanel.add(anexo4Label);

		anexoButton1 = new JButton("Anexo");
		anexoButton1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int option = anexo.showOpenDialog(null);

				if (option == JFileChooser.APPROVE_OPTION) {
					tratamento.salvarAnexo(anexo1Label, anexo.getSelectedFile(),
							"//server/REDE/10-TI/MYSCRUM-FTP", bd, "anexo1", ID_tarefa.getText());
				} else {
					JOptionPane.showMessageDialog(null, "Nenhum arquivo selecionado");
				}
			}
		});
		anexoButton1.setBounds(0, 300, 86, 20);
		rightPanel.add(anexoButton1);

		anexoButton2 = new JButton("Anexo");
		anexoButton2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int option = anexo.showOpenDialog(null);

				if (option == JFileChooser.APPROVE_OPTION) {
					tratamento.salvarAnexo(anexo2Label, anexo.getSelectedFile(),
							"//server/REDE/10-TI/MYSCRUM-FTP", bd, "anexo2", ID_tarefa.getText());
				} else {
					JOptionPane.showMessageDialog(null, "Nenhum arquivo selecionado");
				}
			}
		});
		anexoButton2.setBounds(294, 300, 86, 20);
		rightPanel.add(anexoButton2);

		anexoButton3 = new JButton("Anexo");
		anexoButton3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int option = anexo.showOpenDialog(null);

				if (option == JFileChooser.APPROVE_OPTION) {
					tratamento.salvarAnexo(anexo3Label, anexo.getSelectedFile(),
							"//server/REDE/10-TI/MYSCRUM-FTP", bd, "anexo3", ID_tarefa.getText());
				} else {
					JOptionPane.showMessageDialog(null, "Nenhum arquivo selecionado");
				}
			}
		});
		anexoButton3.setBounds(0, 619, 86, 20);
		rightPanel.add(anexoButton3);

		anexoButton4 = new JButton("Anexo");
		anexoButton4.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int option = anexo.showOpenDialog(null);

				if (option == JFileChooser.APPROVE_OPTION) {
					tratamento.salvarAnexo(anexo4Label, anexo.getSelectedFile(),
							"//server/REDE/10-TI/MYSCRUM-FTP", bd, "anexo4", ID_tarefa.getText());
				} else {
					JOptionPane.showMessageDialog(null, "Nenhum arquivo selecionado");
				}
			}
		});
		anexoButton4.setBounds(294, 619, 86, 20);
		rightPanel.add(anexoButton4);

		tarefaButton = new JButton("Tarefa");
		tarefaButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				contentePanel.nextPanel(15, leftPanel, contentePanel.right);
			}
		});
		tarefaButton.setBounds(486, 649, 90, 28);
		rightPanel.add(tarefaButton);

		deletarButton1 = new JButton("Deletar");
		deletarButton1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				tratamento.excluirAnexo(anexo1Label, bd, "anexo1", ID_tarefa.getText());

			}
		});
		deletarButton1.setBounds(98, 299, 86, 20);
		rightPanel.add(deletarButton1);

		deletarButton2 = new JButton("Deletar");
		deletarButton2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				tratamento.excluirAnexo(anexo2Label, bd, "anexo2", ID_tarefa.getText());

			}
		});
		deletarButton2.setBounds(392, 300, 86, 20);
		rightPanel.add(deletarButton2);

		deletarButton3 = new JButton("Deletar");
		deletarButton3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				tratamento.excluirAnexo(anexo3Label, bd, "anexo3", ID_tarefa.getText());

			}
		});
		deletarButton3.setBounds(98, 619, 86, 20);
		rightPanel.add(deletarButton3);

		deletarButton4 = new JButton("Deletar");
		deletarButton4.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				tratamento.excluirAnexo(anexo4Label, bd, "anexo4", ID_tarefa.getText());
			}
		});
		deletarButton4.setBounds(392, 619, 86, 20);
		rightPanel.add(deletarButton4);

		setLocationRelativeTo(null);// localidade do frame referente a tela(centraliza o frame)
		setVisible(true);// habilita visualização do frame

		SomaDataFim();// confere se a tarefa esta feita e libera a data fim

		// Se a combobox status tive feito libera data fim se não fica editavel
		statusComboBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				SomaDataFim();
			}
		});

		// Ações dos botões
		salvarButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (verificar() == true) {
					// metodo para zerar variaveis
					metodos.zeraVariaveis();

					// metodo para setar variaveis
					setarVariaveis();

					// Metodo para salvar no banco
					metodos.cadastrar();

					// Setando o ID da tarefa
					ID_tarefa.setText(String.valueOf(metodos.ID_TAREFA));

					// Verificando se a tela foi aberta pelo kamban ou tarefa para determinar se
					// atualiza a lista ou não caso seja aberta pelo kamban
					if (kamban == false) {
						TarefaEditTela.this.formularioPai.listar();

				
						// Setando o titulo da tela atual com a descrição da tarefa
						setTitle(descText.getText());

						// Habilitando o botão atualizar
						atualizarButton();
					}

					// Se a tela foi aberta pelo kamban atualiza o kamban
					if (kamban == true) {
						// Setando o titulo da tela atual com a descrição da tarefa
						setTitle(descText.getText());

						// Habilitando o botão atualizar
						atualizarButton();
						
						// Se a tela foi aberta pelo kamban atualiza o kamban
						Controle.telaKamban.CarregarDadosKambans();

						for (int a = 1; a < Controle.telaKamban.voltarAfazer; a++) {// Volta para a pagina que
																						// estava
							Controle.telaKamban.proximoAFazerButton.doClick();
						}
						for (int a = 1; a < Controle.telaKamban.voltarFazendo; a++) {
							Controle.telaKamban.proximoFazendoButton.doClick();
						}
						for (int a = 1; a < Controle.telaKamban.voltarFeito; a++) {
							Controle.telaKamban.proximoFeitoButton.doClick();
						}
					}
				
				} else {
					JOptionPane.showMessageDialog(null, "Preencha todas informações obrigatorias", "Aviso", 1);
				}

			}
		});

		// Adicionando chamada de tela filho
		duplicarButton.addActionListener(new AdicionarTarefaListener(formularioPai));
		duplicarButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (verificar() == true) {

					// metodo para zerar variaveis
					metodos.zeraVariaveis();

					// metodo para setar variaveis
					setarVariaveis();

					// Fecha a tarefa original
					dispose();
				} else {
					JOptionPane.showMessageDialog(null, "Preencha todos os campos para duplicar uma tarefa");
				}
			}
		});

		atualizarButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (verificar() == true) {

					// metodo para zerar variaveis
					metodos.zeraVariaveis();

					// metodo para setar variaveis
					setarVariaveis();

					// Setando id da tarefa a ser atualizada
					variavel.setIDTarefa(Integer.parseInt(ID_tarefa.getText()));

					// metodo para atualizar tarefa no banco
					metodos.atualizar();

					// Verificando se a tela foi aberta pelo kamban ou tarefa para determinar se
					// atualiza a lista ou não caso seja aberta pelo kamban
					if (kamban == false) {
						TarefaEditTela.this.formularioPai.listar();
					}

					// Se a tela foi aberta pelo kamban atualiza o kamban
					if (kamban == true) {
						Controle.telaKamban.CarregarDadosKambans();

						for (int a = 1; a < Controle.telaKamban.voltarAfazer; a++) {// Volta para a pagina que estava
							Controle.telaKamban.proximoAFazerButton.doClick();
						}
						for (int a = 1; a < Controle.telaKamban.voltarFazendo; a++) {
							Controle.telaKamban.proximoFazendoButton.doClick();
						}
						for (int a = 1; a < Controle.telaKamban.voltarFeito; a++) {
							Controle.telaKamban.proximoFeitoButton.doClick();
						}

					}

				} else {
					JOptionPane.showMessageDialog(null, "Preencha todas informações obrigatorias", "Aviso", 1);
				}

			}
		});

		Acrescentar.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (cont == 1) {
					cont += 1;

					exec2ComboBox.setVisible(true);
					porcento2ComboBox.setVisible(true);
				} else if (cont == 2) {
					cont += 1;

					exec3ComboBox.setVisible(true);
					porcento3ComboBox.setVisible(true);
				} else if (cont == 3) {
					cont += 1;

					exec4ComboBox.setVisible(true);
					porcento4ComboBox.setVisible(true);
				} else if (cont == 4) {
					cont += 1;

					exec5ComboBox.setVisible(true);
					porcento5ComboBox.setVisible(true);

				} else if (cont == 5) {
					cont += 1;

					exec6ComboBox.setVisible(true);
					porcento6ComboBox.setVisible(true);
				} else if (cont == 6) {
					cont += 1;

					exec7ComboBox.setVisible(true);
					porcento7ComboBox.setVisible(true);
				} else if (cont == 7) {
					cont += 1;

					exec8ComboBox.setVisible(true);
					porcento8ComboBox.setVisible(true);
				} else if (cont == 8) {
					cont += 1;

					exec9ComboBox.setVisible(true);
					porcento9ComboBox.setVisible(true);
				} else if (cont == 9) {
					cont += 1;

					exec10ComboBox.setVisible(true);
					porcento10ComboBox.setVisible(true);
				} else if (cont == 10) {
					JOptionPane.showMessageDialog(null, "Maximo de executores alcançado", "Aviso", 1);
				}

			}
		});

		Remover.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (cont == 10) {
					cont -= 1;

					exec10ComboBox.setVisible(false);
					exec10ComboBox.setSelectedIndex(0);
					porcento10ComboBox.setVisible(false);
					porcento10ComboBox.setSelectedIndex(0);
				} else if (cont == 9) {
					cont -= 1;

					exec9ComboBox.setVisible(false);
					exec9ComboBox.setSelectedIndex(0);
					porcento9ComboBox.setVisible(false);
					porcento9ComboBox.setSelectedIndex(0);
				} else if (cont == 8) {
					cont -= 1;

					exec8ComboBox.setVisible(false);
					exec8ComboBox.setSelectedIndex(0);
					porcento8ComboBox.setVisible(false);
					porcento8ComboBox.setSelectedIndex(0);
				} else if (cont == 7) {
					cont -= 1;

					exec7ComboBox.setVisible(false);
					exec7ComboBox.setSelectedIndex(0);
					porcento7ComboBox.setVisible(false);
					porcento7ComboBox.setSelectedIndex(0);
				} else if (cont == 6) {
					cont -= 1;

					exec6ComboBox.setVisible(false);
					exec6ComboBox.setSelectedIndex(0);
					porcento6ComboBox.setVisible(false);
					porcento6ComboBox.setSelectedIndex(0);
				} else if (cont == 5) {
					cont -= 1;

					exec5ComboBox.setVisible(false);
					exec5ComboBox.setSelectedIndex(0);
					porcento5ComboBox.setVisible(false);
					porcento5ComboBox.setSelectedIndex(0);
				} else if (cont == 4) {
					cont -= 1;

					exec4ComboBox.setVisible(false);
					exec4ComboBox.setSelectedIndex(0);
					porcento4ComboBox.setVisible(false);
					porcento4ComboBox.setSelectedIndex(0);
				} else if (cont == 3) {
					cont -= 1;

					exec3ComboBox.setVisible(false);
					exec3ComboBox.setSelectedIndex(0);
					porcento3ComboBox.setVisible(false);
					porcento3ComboBox.setSelectedIndex(0);
				} else if (cont == 2) {
					cont -= 1;

					exec2ComboBox.setVisible(false);
					exec2ComboBox.setSelectedIndex(0);
					porcento2ComboBox.setVisible(false);
					porcento2ComboBox.setSelectedIndex(0);
				} else if (cont == 1) {
					JOptionPane.showMessageDialog(null, "É necesario pelo menos 1 executor", "Aviso", 1);
				}

			}
		});

		// CTRL + ; Data de hoje
		descText.addKeyListener(new KeyAdapter() {
			public void keyPressed(KeyEvent e) {
				if (e.getModifiersEx() == 128 && e.getKeyCode() == 59) {
					descText.insert(AtalhoCTRL(), descText.getCaretPosition());
				}
			}
		});

		// TAB pula para combo prioridade
		descText.addKeyListener(new KeyAdapter() {
			public void keyPressed(KeyEvent e) {
				if (e.getKeyCode() == KeyEvent.VK_TAB) {
					prioridadeComboBox.requestFocus();
				}
			}
		});

		// CTRL + ; Data de hoje
		statPendText.addKeyListener(new KeyAdapter() {
			public void keyPressed(KeyEvent e) {
				if (e.getModifiersEx() == 128 && e.getKeyCode() == 59) {
					statPendText.insert(AtalhoCTRL(), statPendText.getCaretPosition());
				}
			}
		});

		// TAB pula para a historicoText
		statPendText.addKeyListener(new KeyAdapter() {
			public void keyPressed(KeyEvent e) {
				if (e.getKeyCode() == KeyEvent.VK_TAB) {
					historicoText.requestFocus();
				}
			}
		});

		// CTRL + ; Data de hoje
		historicoText.addKeyListener(new KeyAdapter() {
			public void keyPressed(KeyEvent e) {
				if (e.getModifiersEx() == 128 && e.getKeyCode() == 59) {
					historicoText.insert(AtalhoCTRL(), historicoText.getCaretPosition());
				}
			}
		});

		// TAB pula para text historico
		historicoText.addKeyListener(new KeyAdapter() {
			public void keyPressed(KeyEvent e) {
				if (e.getKeyCode() == KeyEvent.VK_TAB) {
					salvarButton.requestFocus();
				}
			}
		});

		// Ação de teclas pressionadas na text de data
		dataIniText.getEditor().addKeyListener(new KeyAdapter() {
			public void keyPressed(KeyEvent e) {
				if (e.getModifiersEx() == 128 && e.getKeyCode() == 59) {
					dataIniText.setText(AtalhoCTRL());
				}

				dataRealText.setText(dataIniText.getText());
				SomaDataFim();
			}
		});

		// Ações quando alterar,inserir ou deletar conteudo da text
		dataIniText.getEditor().getDocument().addDocumentListener(new DocumentListener() {

			@Override
			public void removeUpdate(DocumentEvent e) {
				dataRealText.setText(dataIniText.getText());
				SomaDataFim();
			}

			@Override
			public void insertUpdate(DocumentEvent e) {
				dataRealText.setText(dataIniText.getText());
				SomaDataFim();

			}

			@Override
			public void changedUpdate(DocumentEvent e) {

			}
		});

		dataRealText.getEditor().addKeyListener(new KeyAdapter() {
			public void keyPressed(KeyEvent e) {
				if (e.getModifiersEx() == 128 && e.getKeyCode() == 59) {
					dataRealText.setText(AtalhoCTRL());
				}
			}
		});
		datafimText.getEditor().addKeyListener(new KeyAdapter() {
			public void keyPressed(KeyEvent e) {
				if (e.getModifiersEx() == 128 && e.getKeyCode() == 59) {
					datafimText.setText(AtalhoCTRL());
				}
			}
		});
		// Ação combobox prazo
		prazDiaComboBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				SomaDataFim();

			}
		});

		pecentText.addFocusListener(new FocusAdapter() {
			public void focusLost(FocusEvent evt) {
				ValidaNumero(pecentText);
				if (Integer.parseInt(pecentText.getText()) > 100) {
					pecentText.setText("100");
				}
				if (Integer.parseInt(pecentText.getText()) == 0) {
					pecentText.setText("1");
				}
			}
		});

		bd.getConnection();
		listarFeriados();
		carregarComboBox();
		CorretoOrtografico();

	}

	// Metodos

	public void atualizarButton() {
		atualizarButton.setEnabled(true);
		salvarButton.setEnabled(false);
		anexoButton.setEnabled(true);
	}

	public void salvarButton() {
		atualizarButton.setEnabled(false);
		salvarButton.setEnabled(true);
		anexoButton.setEnabled(false);
	}

	public void ValidaNumero(JTextField Numero) {

		if (Numero.getText().length() != 0) {
			try {
				Long.parseLong(Numero.getText());
			} catch (NumberFormatException ex) {
				JOptionPane.showMessageDialog(null, "Esse Campo só aceita números", "Informação",
						JOptionPane.INFORMATION_MESSAGE);
				Numero.grabFocus();
				Numero.setText("");
			}
		}
	}

	public void SomaDataFim() {
		String data = null;
		try {
			if (dataIniText.getText().equals("")) {

			} else {
				Calendar cal = Calendar.getInstance();// instacia classe Calendar

				cal.setTime(new SimpleDateFormat("dd/MM/yyyy").parse(dataIniText.getText()));// troca data atual pela da
																								// text data inicio

				int dias = 0;// se o index estiver fora do 0 variavel dias recebe o valor se não mantem com 0
				if (prazDiaComboBox.getSelectedIndex() != 0) {
					dias = Integer.parseInt(prazDiaComboBox.getSelectedItem().toString());
				}

				cal.add(Calendar.DAY_OF_MONTH, +dias);// faz a soma com a combo prazo de dias e subtrai 1 para contar o
														// dia
														// real no prazo

				SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");// cria formato da data

				data = formato.format(cal.getTime());// tranforma em string a soma da data

			}
			if (statusComboBox.getSelectedItem() == "Feito") {
				datafimText.setEnabled(true);
				pecentText.setText("100");
				pecentText.setEditable(false);
				datafimText.setText(data);
			} else {
				datafimText.setEnabled(false);
				datafimText.setText(data);// adiciona a soma a text data fim
			}

			if (statusComboBox.getSelectedItem() == "A fazer") {
				pecentText.setText("0");
				pecentText.setEditable(false);
			}
			if (statusComboBox.getSelectedItem() == "Fazendo") {
				pecentText.setEditable(true);
				if (Integer.parseInt(pecentText.getText()) >= 100) {
					pecentText.setText("99");
				}
				if (Integer.parseInt(pecentText.getText()) == 0) {
					pecentText.setText("1");
				}
			}

		} catch (Exception erro) {

		}
	}

	public void setarVariaveis() {
		// setando variaveis
		variavel.setDescricao(descText.getText());
		variavel.setPrioridade(Integer.parseInt(prioridadeComboBox.getSelectedItem().toString()));
		variavel.setTamanho(tamanhoComboBox.getSelectedItem().toString());
		variavel.setStatus(statusComboBox.getSelectedItem().toString());
		variavel.setCentroCusto(centroCComboBox.getSelectedItem().toString());
		variavel.setPrazo(Integer.parseInt(prazDiaComboBox.getSelectedItem().toString()));
		if (pred1Text.getText().equals("")) {
			variavel.setPredecessor1(0);
		} else {
			variavel.setPredecessor1(Integer.parseInt(pred1Text.getText()));
		}
		if (pred2Text.getText().equals("")) {
			variavel.setPredecessor2(0);
		} else {
			variavel.setPredecessor2(Integer.parseInt(pred2Text.getText()));
		}
		if (pred3Text.getText().equals("")) {
			variavel.setPredecessor3(0);
		} else {
			variavel.setPredecessor3(Integer.parseInt(pred3Text.getText()));
		}
		variavel.setChecado(checadoComboBox.getSelectedItem().toString());
		variavel.setDataInicio(dataIniText.getText());
		variavel.setDataReal(dataRealText.getText());
		variavel.setDataFim(datafimText.getText());
		variavel.setPorcentagem(Integer.parseInt(pecentText.getText().replaceAll("[^0-9]*", "")));

		if (etapaCombo.getSelectedIndex() != 0) {
			variavel.setEtapa(etapaCombo.getSelectedItem().toString());
		}

		if (subEtapaCombo.getSelectedIndex() != 0) {
			variavel.setSubEtapa(subEtapaCombo.getSelectedItem().toString());
		}

		if (pendComboBox.getSelectedIndex() != 0) {// Se o index for diferente de zero carregue a variavel
			variavel.setPendentePor(pendComboBox.getSelectedItem().toString());
		}

		if (processoComboBox.getSelectedIndex() != 0) {
			variavel.setProcesso(processoComboBox.getSelectedItem().toString());
		}

		variavel.setResponsavel(respComboBox.getSelectedItem().toString());
		variavel.setAutoridade(autoridadeComboBox.getSelectedItem().toString());
		variavel.setDepartamento(dptoCombobox.getSelectedItem().toString());

		if (exec1ComboBox.getSelectedIndex() != 0 && porcento1ComboBox.getSelectedIndex() != 0) {
			variavel.setExecutor1(exec1ComboBox.getSelectedItem().toString());
			String porcento = porcento1ComboBox.getSelectedItem().toString().replace("%", "");
			variavel.setPorcento1(Integer.parseInt((porcento)));
		} else {
			variavel.setExecutor1(null);
		}
		if (exec2ComboBox.getSelectedIndex() != 0 && porcento2ComboBox.getSelectedIndex() != 0) {
			variavel.setExecutor2(exec2ComboBox.getSelectedItem().toString());
			String porcento = porcento2ComboBox.getSelectedItem().toString().replace("%", "");
			variavel.setPorcento2(Integer.parseInt(porcento));
		} else {
			variavel.setExecutor2(null);
		}
		if (exec3ComboBox.getSelectedIndex() != 0 && porcento3ComboBox.getSelectedIndex() != 0) {
			variavel.setExecutor3(exec3ComboBox.getSelectedItem().toString());
			String porcento = porcento3ComboBox.getSelectedItem().toString().replace("%", "");
			variavel.setPorcento3(Integer.parseInt(porcento));
		} else {
			variavel.setExecutor3(null);
		}
		if (exec4ComboBox.getSelectedIndex() != 0 && porcento4ComboBox.getSelectedIndex() != 0) {
			variavel.setExecutor4(exec4ComboBox.getSelectedItem().toString());
			String porcento = porcento4ComboBox.getSelectedItem().toString().replace("%", "");
			variavel.setPorcento4(Integer.parseInt(porcento));
		} else {
			variavel.setExecutor4(null);
		}
		if (exec5ComboBox.getSelectedIndex() != 0 && porcento5ComboBox.getSelectedIndex() != 0) {
			variavel.setExecutor5(exec5ComboBox.getSelectedItem().toString());
			String porcento = porcento5ComboBox.getSelectedItem().toString().replace("%", "");
			variavel.setPorcento5(Integer.parseInt(porcento));
		} else {
			variavel.setExecutor5(null);
		}
		if (exec6ComboBox.getSelectedIndex() != 0 && porcento6ComboBox.getSelectedIndex() != 0) {
			variavel.setExecutor6(exec6ComboBox.getSelectedItem().toString());
			String porcento = porcento6ComboBox.getSelectedItem().toString().replace("%", "");
			variavel.setPorcento6(Integer.parseInt(porcento));
		} else {
			variavel.setExecutor6(null);
		}
		if (exec7ComboBox.getSelectedIndex() != 0 && porcento7ComboBox.getSelectedIndex() != 0) {
			variavel.setExecutor7(exec7ComboBox.getSelectedItem().toString());
			String porcento = porcento7ComboBox.getSelectedItem().toString().replace("%", "");
			variavel.setPorcento7(Integer.parseInt(porcento));
		} else {
			variavel.setExecutor7(null);
		}
		if (exec8ComboBox.getSelectedIndex() != 0 && porcento8ComboBox.getSelectedIndex() != 0) {
			variavel.setExecutor8(exec8ComboBox.getSelectedItem().toString());
			String porcento = porcento8ComboBox.getSelectedItem().toString().replace("%", "");
			variavel.setPorcento8(Integer.parseInt(porcento));
		} else {
			variavel.setExecutor8(null);
		}
		if (exec9ComboBox.getSelectedIndex() != 0 && porcento9ComboBox.getSelectedIndex() != 0) {
			variavel.setExecutor9(exec9ComboBox.getSelectedItem().toString());
			String porcento = porcento9ComboBox.getSelectedItem().toString().replace("%", "");
			variavel.setPorcento9(Integer.parseInt(porcento));
		} else {
			variavel.setExecutor9(null);
		}
		if (exec10ComboBox.getSelectedIndex() != 0 && porcento10ComboBox.getSelectedIndex() != 0) {
			variavel.setExecutor10(exec10ComboBox.getSelectedItem().toString());
			String porcento = porcento10ComboBox.getSelectedItem().toString().replace("%", "");
			variavel.setPorcento10(Integer.parseInt(porcento));
		} else {
			variavel.setExecutor10(null);
		}

		variavel.setStatusPendencia(statPendText.getText());
		variavel.setHistorico(historicoText.getText());

	}

	public void carregarDados() {
		ID_tarefa.setText(String.valueOf(variavel.getIDTarefa()));
		descText.setText(variavel.getDescricao());
		prioridadeComboBox.setSelectedItem(String.valueOf(variavel.getPrioridade()));
		centroCComboBox.setSelectedItem(variavel.getCentroCusto());
		statusComboBox.setSelectedItem(variavel.getStatus());
		tamanhoComboBox.setSelectedItem(variavel.getTamanho());
		pecentText.setText(String.valueOf(variavel.getPorcentagem()));
		prazDiaComboBox.setSelectedItem(String.valueOf(variavel.getPrazo()));
		pred1Text.setText(String.valueOf(variavel.getPredecessor1()));
		pred2Text.setText(String.valueOf(variavel.getPredecessor2()));
		pred3Text.setText(String.valueOf(variavel.getPredecessor3()));

		if (variavel.getChecado() == "" || variavel.getChecado() == null) {
			checadoComboBox.setSelectedIndex(0);
		} else {
			checadoComboBox.setSelectedItem(variavel.getChecado());
		}

		dataIniText.setText(variavel.getDataInicio());
		dataRealText.setText(variavel.getDataReal());
		datafimText.setText(variavel.getDataFim());
		pendComboBox.setSelectedItem(variavel.getPendentePor());
		historicoText.setText(variavel.getStatusPendencia());
		dptoCombobox.setSelectedItem(variavel.getDepartamento());
		respComboBox.setSelectedItem(variavel.getResponsavel());
		autoridadeComboBox.setSelectedItem(variavel.getAutoridade());

		if (variavel.getEtapa() == "" || variavel.getEtapa() == null) {
			etapaCombo.setSelectedIndex(0);
		} else {
			etapaCombo.setSelectedItem(variavel.getEtapa());
		}

		if (variavel.getSubEtapa() == "" || variavel.getSubEtapa() == null) {
			subEtapaCombo.setSelectedIndex(0);
		} else {
			subEtapaCombo.setSelectedItem(variavel.getSubEtapa());
		}

		if (variavel.getProcesso() == "" || variavel.getProcesso() == null) {
			processoComboBox.setSelectedIndex(0);
		} else {
			processoComboBox.setSelectedItem(variavel.getProcesso());
		}

		statPendText.setText(variavel.getStatusPendencia());
		historicoText.setText(variavel.getHistorico());
		atualiazacaoLabel.setText(variavel.getAtuaizacao());

		exec1ComboBox.setSelectedItem(variavel.getExecutor1());
		porcento1ComboBox.setSelectedItem(retornaPorcento(String.valueOf(variavel.getPorcento1())));

		if (variavel.getExecutor2() != "" && variavel.getExecutor2() != null) {
			exec2ComboBox.setSelectedItem(variavel.getExecutor2());
			porcento2ComboBox.setSelectedItem(retornaPorcento(String.valueOf(variavel.getPorcento2())));
			exec2ComboBox.setVisible(true);
			porcento2ComboBox.setVisible(true);
			cont = 2;
		}

		if (variavel.getExecutor3() != "" && variavel.getExecutor3() != null) {
			exec3ComboBox.setSelectedItem(variavel.getExecutor3());
			porcento3ComboBox.setSelectedItem(retornaPorcento(String.valueOf(variavel.getPorcento3())));
			exec3ComboBox.setVisible(true);
			porcento3ComboBox.setVisible(true);
			cont = 3;
		}

		if (variavel.getExecutor4() != "" && variavel.getExecutor4() != null) {
			exec4ComboBox.setSelectedItem(variavel.getExecutor4());
			porcento4ComboBox.setSelectedItem(retornaPorcento(String.valueOf(variavel.getPorcento4())));
			exec4ComboBox.setVisible(true);
			porcento4ComboBox.setVisible(true);
			cont = 4;
		}

		if (variavel.getExecutor5() != "" && variavel.getExecutor5() != null) {
			exec5ComboBox.setSelectedItem(variavel.getExecutor5());
			porcento5ComboBox.setSelectedItem(retornaPorcento(String.valueOf(variavel.getPorcento5())));
			exec5ComboBox.setVisible(true);
			porcento5ComboBox.setVisible(true);
			cont = 5;
		}

		if (variavel.getExecutor6() != "" && variavel.getExecutor6() != null) {
			exec6ComboBox.setSelectedItem(variavel.getExecutor6());
			porcento6ComboBox.setSelectedItem(retornaPorcento(String.valueOf(variavel.getPorcento6())));
			exec6ComboBox.setVisible(true);
			porcento6ComboBox.setVisible(true);
			cont = 6;
		}

		if (variavel.getExecutor7() != "" && variavel.getExecutor7() != null) {
			exec7ComboBox.setSelectedItem(variavel.getExecutor7());
			porcento7ComboBox.setSelectedItem(retornaPorcento(String.valueOf(variavel.getPorcento7())));
			exec7ComboBox.setVisible(true);
			porcento7ComboBox.setVisible(true);
			cont = 7;
		}

		if (variavel.getExecutor8() != "" && variavel.getExecutor8() != null) {
			exec8ComboBox.setSelectedItem(variavel.getExecutor8());
			porcento8ComboBox.setSelectedItem(retornaPorcento(String.valueOf(variavel.getPorcento8())));
			exec8ComboBox.setVisible(true);
			porcento8ComboBox.setVisible(true);
			cont = 8;
		}

		if (variavel.getExecutor9() != "" && variavel.getExecutor9() != null) {
			exec9ComboBox.setSelectedItem(variavel.getExecutor9());
			porcento9ComboBox.setSelectedItem(retornaPorcento(String.valueOf(variavel.getPorcento9())));
			exec9ComboBox.setVisible(true);
			porcento9ComboBox.setVisible(true);
			cont = 9;
		}

		if (variavel.getExecutor10() != "" && variavel.getExecutor10() != null) {
			exec10ComboBox.setSelectedItem(variavel.getExecutor10());
			porcento10ComboBox.setSelectedItem(retornaPorcento(String.valueOf(variavel.getPorcento10())));
			exec10ComboBox.setVisible(true);
			porcento10ComboBox.setVisible(true);
			cont = 10;
		}

	}

	public String AtalhoCTRL() {
		String data = "";

		Date date = new Date(System.currentTimeMillis());
		SimpleDateFormat formatarDate = new SimpleDateFormat("dd/MM/yyyy");
		data = formatarDate.format(date);

		return data;
	}

	public String retornaPorcento(String valor) {

		String porcento = String.valueOf(valor);
		StringBuilder stringBuilder = new StringBuilder(porcento);
		stringBuilder.insert(porcento.length(), '%');

		return stringBuilder.toString();
	}

	public boolean verificar() {
		boolean ok = false;

		if (descText.getText().equals("")) {
			descText.requestFocus();
		} else if (prioridadeComboBox.getSelectedIndex() == 0) {
			prioridadeComboBox.requestFocus();
		} else if (tamanhoComboBox.getSelectedIndex() == 0) {
			tamanhoComboBox.requestFocus();
		} else if (statusComboBox.getSelectedIndex() == 0) {
			statusComboBox.requestFocus();
		} else if (centroCComboBox.getSelectedIndex() == 0) {
			centroCComboBox.requestFocus();
		} else if (prazDiaComboBox.getSelectedIndex() == 0) {
			prazDiaComboBox.requestFocus();
		} else if (dataIniText.getText().equals("")) {
			dataIniText.getEditor().requestFocus();
		} else if (dataRealText.getText().equals("")) {
			dataRealText.getEditor().requestFocus();
		} else if (datafimText.getText().equals("")) {
			datafimText.getEditor().requestFocus();
		} else if (pecentText.getText().equals("")) {
			pecentText.requestFocus();
		} else if (respComboBox.getSelectedIndex() == 0) {
			respComboBox.requestFocus();
		} else if (autoridadeComboBox.getSelectedIndex() == 0) {
			autoridadeComboBox.requestFocus();
		} else if (dptoCombobox.getSelectedIndex() == 0) {
			dptoCombobox.requestFocus();
		} else if (exec1ComboBox.getSelectedIndex() == 0) {
			exec1ComboBox.requestFocus();
		} else if (porcento1ComboBox.getSelectedIndex() == 0) {
			porcento1ComboBox.requestFocus();
		} else if (processoComboBox.getSelectedIndex() == 0){
			processoComboBox.requestFocus();
		} else {
			ok = true;
		}

		//Verificação usada apenas para a Masotti
		if (dptoCombobox.getSelectedItem().toString().equals("Obra")) {
			if (etapaCombo.getSelectedIndex() == 0 || subEtapaCombo.getSelectedIndex() == 0) {
				JOptionPane.showMessageDialog(null, "Para o departamento obra, o campo etapa e subetapa é obrigatório");
				etapaCombo.requestFocus();
				ok = false;
			}
		}

		return ok;
	}

	public void listarFeriados() {

		String sql = "SELECT data_feriado FROM feriados";

		try {

			bd.st = bd.con.prepareStatement(sql);

			bd.rs = bd.st.executeQuery();

			while (bd.rs.next() == true) {
				feriados.add(bd.rs.getDate(1));
				feriadosString.add(new SimpleDateFormat("dd/MM/yyyy").format(bd.rs.getDate(1)));
			}

		} catch (SQLException erro) {
			JOptionPane.showMessageDialog(null, erro.toString(), "ERRO AO LISTAR FERIADO", 0);
		}
	}

	public boolean VerificarFeriados(String data) {
		boolean retorno = false;
		int a = 0;
		while (a < feriados.size()) {
			if (feriados.get(a).equals(stringToDate(data))) {
				retorno = true;
			}
			a++;
		}
		return retorno;
	}

	public Date stringToDate(String data) {
		Date dataretorno = null;
		SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");

		try {
			dataretorno = formato.parse(data);
		} catch (ParseException e1) {

			e1.printStackTrace();
		}

		return dataretorno;
	}

	public void ChamadaPeloKamban() {
		kamban = true;
	}

	public void carregarComboBox() {
		// Carregando combo boxs executor,responsavel e predecesor
		String pessoa;
		try {
			sql = "SELECT * FROM pessoa ORDER BY nome ASC";
			bd.st = bd.con.prepareStatement(sql);
			bd.rs = bd.st.executeQuery();
			while (bd.rs.next()) {
				pessoa = bd.rs.getString("nome");
				exec1ComboBox.addItem(pessoa);
				exec2ComboBox.addItem(pessoa);
				exec3ComboBox.addItem(pessoa);
				exec4ComboBox.addItem(pessoa);
				exec5ComboBox.addItem(pessoa);
				exec6ComboBox.addItem(pessoa);
				exec7ComboBox.addItem(pessoa);
				exec8ComboBox.addItem(pessoa);
				exec9ComboBox.addItem(pessoa);
				exec10ComboBox.addItem(pessoa);
				respComboBox.addItem(pessoa);
				pendComboBox.addItem(pessoa);
				autoridadeComboBox.addItem(pessoa);
				checadoComboBox.addItem(pessoa);
			}
		} catch (SQLException erro) {
			JOptionPane.showMessageDialog(null, erro.toString());
			{
			}
		}
		// FIM

		// Carregando combo boxs centro de custo
		String cc;
		try {
			sql = "SELECT * FROM centro_custo ORDER BY centrocusto ASC";
			bd.st = bd.con.prepareStatement(sql);
			bd.rs = bd.st.executeQuery();
			while (bd.rs.next()) {
				cc = bd.rs.getString("centrocusto");
				centroCComboBox.addItem(cc);

			}
		} catch (SQLException erro) {
			JOptionPane.showMessageDialog(null, erro.toString());
			{
			}
		}
		// FIM

		// Carregando combo boxs centro de custo
		String tamanho;
		try {
			sql = "SELECT * FROM tamanho ORDER BY peso ASC";
			bd.st = bd.con.prepareStatement(sql);
			bd.rs = bd.st.executeQuery();
			while (bd.rs.next()) {
				tamanho = bd.rs.getString("descricao");
				tamanhoComboBox.addItem(tamanho);

			}
		} catch (SQLException erro) {
			JOptionPane.showMessageDialog(null, erro.toString());
		}
		// FIM

		// Carregando combo box dpto
		String dpto;
		try {
			sql = "SELECT * FROM departamento ORDER BY departamento ASC";
			bd.st = bd.con.prepareStatement(sql);
			bd.rs = bd.st.executeQuery();
			while (bd.rs.next()) {
				dpto = bd.rs.getString("departamento");
				dptoCombobox.addItem(dpto);

			}

		} catch (SQLException erro) {
			JOptionPane.showMessageDialog(null, erro.toString());

		}
		// FIM

		// Carregando combo box processo
		String processo;
		try {
			sql = "SELECT * FROM processos ORDER BY processo ASC";
			bd.st = bd.con.prepareStatement(sql);
			bd.rs = bd.st.executeQuery();
			while (bd.rs.next()) {
				processo = bd.rs.getString("processo");
				processoComboBox.addItem(processo);

			}

		} catch (SQLException erro) {
			JOptionPane.showMessageDialog(null, erro.toString());
		}
		// FIM
	}

	public void CorretoOrtografico() {
		// Create user dictionary in the current working directory of
		// your application
		SpellChecker.setUserDictionaryProvider(new FileUserDictionary());

		// Load the configuration from the file dictionaries.cnf and
		// use the current locale or the first language as default
		try {
			SpellChecker.registerDictionaries(new URL("file", null, ""), "en,pt", "pt");
		} catch (MalformedURLException e) {
			e.printStackTrace();
		}
		// enable the spell checking on the text component with all
		// features
		SpellChecker.register(descText);
		SpellChecker.register(statPendText);
		SpellChecker.register(historicoText);
	}

	public void criarListSubEtapa() {

		try {
			String sql = "SELECT * FROM sub_etapas ORDER BY sub_etapa ASC";

			if (Banco.conexao()) {
				Banco.st = Banco.con.prepareStatement(sql);
				Banco.rs = Banco.st.executeQuery();

				subEtapas = Banco.rs;
			}

		} catch (SQLException erro) {
			JOptionPane.showMessageDialog(null, erro.toString());
		}
	}

	public void carregarComboBoxSubEtapa(String etapa) {
		String idEtapa = null;
		String a;
		int b = 1;
		// Esvaziando a combobox
		while (b < subEtapaCombo.getItemCount()) {
			a = subEtapaCombo.getItemAt(b).toString();
			subEtapaCombo.removeItem(a);
		}

		try {
			etapas.beforeFirst();
			while (etapas.next()) {
				if (etapas.getString("etapa").equals(etapa)) {
					idEtapa = etapas.getString("id_etapa");
				}
			}

			subEtapas.beforeFirst();
			while (subEtapas.next()) {
				if (subEtapas.getString("id_etapa").equals(idEtapa)) {
					subEtapaCombo.addItem(subEtapas.getString("sub_etapa"));
				}
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void criarListEtapa() {

		try {
			String sql = "SELECT etapas.id_etapa, etapas.etapa, centro_custo.centrocusto FROM etapas\r\n"
					+ "INNER JOIN centro_custo\r\n" + "ON centro_custo.id_centro_custo = etapas.id_cc \r\n"
					+ "ORDER BY etapa ASC";

			if (Banco.conexao()) {
				Banco.st = Banco.con.prepareStatement(sql);
				Banco.rs = Banco.st.executeQuery();

				etapas = Banco.rs;
			}

		} catch (SQLException erro) {
			JOptionPane.showMessageDialog(null, erro.toString());
		}
	}

	public void carregarComboBoxEtapa(String cc) {
		String a;
		int b = 1;
		// Esvaziando a combobox
		while (b < etapaCombo.getItemCount()) {
			a = etapaCombo.getItemAt(b).toString();
			etapaCombo.removeItem(a);
		}

		try {
			etapas.beforeFirst();
			while (etapas.next()) {
				if (etapas.getString("centrocusto").equals(cc)) {
					etapaCombo.addItem(etapas.getString("etapa"));
				}
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

}// Fim da classe
