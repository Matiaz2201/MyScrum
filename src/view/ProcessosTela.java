package view;

//Generated by GuiGenie - Copyright (c) 2004 Mario Awad.
//Home Page http://guigenie.cjb.net - Check often for new versions!

import java.awt.*;
import java.awt.event.*;
import java.sql.SQLException;

import javax.swing.*;

import com.myscrum.banco.BD;
import com.myscrum.model.Processos;
import com.myscrum.model.ProcessosDAO;

public class ProcessosTela extends JPanel {
	/**
	 * Desenvolvido por Abner Matias e Pedro Henrique
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private JComboBox<String> jaCadComboBox;
	private JTextField processoText;
	private JButton salvarButton;
	private JButton atualizarButton;
	private JLabel processoLabel;
	private JLabel jaCadLabel;

	ProcessosDAO metodos = new ProcessosDAO();
	Processos variavel = new Processos();
	BD bd = new BD();
	String sql;

	public ProcessosTela() {
		// construct preComponents
		String[] jaCadComboBoxItems = { "Selecione processo" };

		// construct components
		jaCadComboBox = new JComboBox<String>(jaCadComboBoxItems);
		processoText = new JTextField(5);
		salvarButton = new JButton("Salvar");
		atualizarButton = new JButton("Atualizar");
		atualizarButton.setEnabled(false);
		processoLabel = new JLabel("Processo:");
		jaCadLabel = new JLabel("Já cadastrado:");

		setBackground(Color.WHITE);

		// adjust size and set layout
		setPreferredSize(new Dimension(422, 348));
		setLayout(null);

		// add components
		add(jaCadComboBox);
		add(processoText);
		add(salvarButton);
		add(atualizarButton);
		add(processoLabel);
		add(jaCadLabel);

		// set component bounds (only needed by Absolute Positioning)
		jaCadComboBox.setBounds(110, 140, 210, 25);
		jaCadComboBox.setBackground(new Color(41, 106, 158));
		jaCadComboBox.setForeground(Color.WHITE);
		processoText.setBounds(110, 75, 210, 30);
		processoText.setBackground(new Color(41, 106, 158));
		processoText.setForeground(Color.WHITE);
		salvarButton.setBounds(250, 265, 120, 35);
		salvarButton.setBackground(new Color(163, 184, 204));
		atualizarButton.setBounds(50, 265, 120, 35);
		atualizarButton.setBackground(new Color(163, 184, 204));
		processoLabel.setBounds(110, 50, 95, 25);
		jaCadLabel.setBounds(110, 115, 95, 25);

		// Preenchendo a combo box
		try {
			sql = "SELECT * FROM processos ORDER BY processo ASC";
			bd.getConnection();
			bd.st = bd.con.prepareStatement(sql);
			bd.rs = bd.st.executeQuery();
			while (bd.rs.next()) {
				String proc = bd.rs.getString("processo");
				jaCadComboBox.addItem(proc);
			}
			bd.close();
		} catch (SQLException erro) {
			JOptionPane.showMessageDialog(null, erro.toString());
		}
		// FIM

		jaCadComboBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (jaCadComboBox.getSelectedIndex() == 0) {
					salvarButton();
					processoText.setText("");
				} else {
					atualizarButton();
					processoText.setText(jaCadComboBox.getSelectedItem().toString());
				}
			}
		});

		salvarButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int escolha;
				if (processoText.getText().equals("")) {
					JOptionPane.showMessageDialog(null, "Preencha o campos corretamente", "Campo Vazio", 0);
				} else if (processoText.getText().equals(jaCadComboBox.getSelectedItem().toString())) {
					JOptionPane.showMessageDialog(null, "Altere o nome do processo para atualizar", "Mensagem", 0);
				} else {
					escolha = JOptionPane.showConfirmDialog(null,
							"Deseja realmente cadastrar " + processoText.getText() + " como um processo ?",
							"Selecione uma opção", JOptionPane.YES_NO_OPTION);
					if (escolha == JOptionPane.YES_OPTION) {
						variavel.setProcesso(processoText.getText());
						metodos.cadastar();
						carregarComboBox();
						processoText.setText("");
					}
				}
			}
		});

		atualizarButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int escolha;
				if (processoText.getText().equals("")) {
					JOptionPane.showMessageDialog(null, "Preencha o campos corretamente", "Campo Vazio", 0);
				} else if (processoText.getText().equals(jaCadComboBox.getSelectedItem().toString())) {
					JOptionPane.showMessageDialog(null, "Altera o nome do processo para atualizar", "Mensagem", 0);
				} else {
					escolha = JOptionPane.showConfirmDialog(null,
							"Deseja realmente altera o processo " + jaCadComboBox.getSelectedItem().toString()
									+ " para " + processoText.getText() + " ?",
							"Selecione uma opção", JOptionPane.YES_NO_OPTION);
					if (escolha == JOptionPane.YES_OPTION) {
						variavel.setProcesso_atualiza(processoText.getText());
						variavel.setProcesso(jaCadComboBox.getSelectedItem().toString());
						metodos.atualizar();
						carregarComboBox();
						processoText.setText("");
					}
				}
			}
		});
	}

	public void atualizarButton() {
		atualizarButton.setEnabled(true);
		salvarButton.setEnabled(false);
	}

	public void salvarButton() {
		salvarButton.setEnabled(true);
		atualizarButton.setEnabled(false);
	}

	public void carregarComboBox() {
		String proc = null;
		String a;
		int b = 1;
		// Esvaziando a combobox
		while (b < jaCadComboBox.getItemCount()) {
			a = jaCadComboBox.getItemAt(b).toString();
			jaCadComboBox.removeItem(a);
		}

		// Preenchendo a combo box
		try {
			sql = "SELECT * FROM processos ORDER BY processo ASC";
			bd.getConnection();
			bd.st = bd.con.prepareStatement(sql);
			bd.rs = bd.st.executeQuery();
			while (bd.rs.next()) {
				proc = bd.rs.getString("processo");
				jaCadComboBox.addItem(proc);
			}
			bd.close();
		} catch (SQLException erro) {
			JOptionPane.showMessageDialog(null, erro.toString());
		}
	}
}
